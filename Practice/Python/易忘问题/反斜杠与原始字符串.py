

# -------------------------------------------------
print('-------------------------------------------')

# 使用原始字符串原样输出字符串。字符串末尾的反斜杠不能用此方法，需要双反斜杠。
# 字符串的末尾，即使是原始（raw）字符串末尾也不能带奇数个反斜杠，因为这会引起后续引号的转义！
str1 = r's\s\s\ '       # 可以先在末尾加一个空格
str2 = str1.rstrip()    # 再去掉空白符。rstrip()默认去除空白符，可以在括号内指定。
print(str2)             # 输出新的想要的字符串。即：print(str1.rstrip())

""" > **针对正则表达式用户的提示**
> 在处理正则表达式时应全程使用原始字符串。否则，将会有大量 Backwhacking 需要处理。举例说明的话，反向引用可以通过 `'\\1'` 或 `r'\1' ` 来实现。 """

# -------------------------------------------------
print('-------------------------------------------')

# 输出引号的种种办法

print("What's your name?")    # 交替使用单双引号
print('What\'s your name?')   # 转义序列（Escape Sequence）实现（加反斜杠）
print(r"What's your name?")   # 使用原始字符串

# -------------------------------------------------
print('-------------------------------------------')

# 去除字符串特定位置的字符(包括\n、\r、\t、' '，即：换行、回车、制表符、空格)
# 当chars为空时，默认删除空白符，也包括'\n'、'\r'、'\t'
str3 = 'a     zlstzz%zzz '
str4 = 'a     zlstzz%zzzp'

# 去除起始字符
print(str3.lstrip('a'))

# 去除首末字符
print(str3.strip())

# 去除末端字符
print(str4.rstrip())
print(str4.rstrip('p'))

# 如果指定的字符不在指定位置（起始、末端）则不生效

# -------------------------------------------------
print('-------------------------------------------')
